# Three-Server Web Infrastructure for www.foobar.com

## Overview

This design separates the infrastructure into three servers to enhance scalability, availability, and fault tolerance:
- 1 Load Balancer (HAProxy)
- 1 Web Server (Nginx)
- 1 Application Server
- 1 Database Server (MySQL with Primary-Replica cluster)
- Application files deployed on the application server

---

## How the Infrastructure Works

1. User requests `www.foobar.com`.
2. DNS resolves `www.foobar.com` to the load balancerâ€™s IP.
3. HAProxy distributes incoming requests to the web server.
4. Nginx handles HTTP/HTTPS traffic and forwards dynamic requests to the application server.
5. The application server processes logic and communicates with the MySQL primary-replica database cluster.
6. Responses flow back through Nginx and HAProxy to the user.

---

## Added Elements and Their Purposes

| Element           | Purpose                                                                                         |
|-------------------|------------------------------------------------------------------------------------------------|
| Load Balancer     | Distributes traffic to avoid overload, provides fault tolerance                               |
| Web Server       | Manages web traffic, serves static content, proxies dynamic requests                         |
| Application Server| Executes backend code, processes business logic                                              |
| Database Cluster  | Primary handles writes; replicas serve reads to improve performance and availability         |

---

## Load Balancer Distribution Algorithm

- **Round Robin:** Distributes requests evenly in a sequential manner to backend servers.
- Other options include Weighted Round Robin, Least Connections, and Source IP Hash.

---

## Active-Active vs Active-Passive Load Balancer Setup

- **Active-Active:** Multiple load balancers run simultaneously, sharing the traffic load for better resource use and seamless failover.
- **Active-Passive:** One load balancer is active, while others stand by to take over if failure occurs, prioritizing reliability but may introduce failover delay.

This design typically uses an **Active-Active** setup.

---

## Primary-Replica Database Cluster Explained

| Node      | Role                                                                                         |
|-----------|----------------------------------------------------------------------------------------------|
| Primary   | Handles all write operations and replicates data changes to replicas                         |
| Replica   | Handles read queries, offloading work from the primary and providing redundancy             |

- Applications write only to the primary node.
- Reads can be sent to replicas to improve scalability.

---

## Potential Issues

- Single Points of Failure (SPOF):
  - Load balancer can be a SPOF if no backup exists.
  - Database primary node remains a SPOF for writes.
- Security:
  - No firewall configured exposes servers to threats.
  - Lack of HTTPS means insecure data transmission.
- No monitoring tools to detect outages or performance problems.

---

